{"version":3,"file":"static/js/958.a13685b4.chunk.js","mappings":"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","sources":["components/ButtonComponent.jsx","../node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","components/ImgRegisterComponent.jsx","components/TypeComponent.jsx","components/CircleComponent.jsx","pages/Participation.jsx"],"sourcesContent":["/**\r\n * Name : ButtonComponent\r\n * Desc : Select 공통 컴포넌트\r\n * Property\r\n *  - value : 값\r\n *  - onChange : change event func\r\n *  - option : option 배열\r\n *  - class : 셀렉트 스타일\r\n **/\r\n\r\nconst ButtonComponent = (props) => {\r\n  return (\r\n    <button className={props.class} onClick={props.onClick}>\r\n      {props.txt}\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default ButtonComponent;\r\n","import arrayWithoutHoles from \"./arrayWithoutHoles.js\";\nimport iterableToArray from \"./iterableToArray.js\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nimport nonIterableSpread from \"./nonIterableSpread.js\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"./arrayLikeToArray.js\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","/**\r\n * Name : ImgRegisterComponent\r\n * Desc : Img 등록 컴포넌트\r\n * Property\r\n *  - class : 컴포넌트 클래스 이름\r\n *  - title : 제목 ( ex. # 사진 등록)\r\n *  - cont : 제목 아래 내용 텍스트\r\n *  - src : [이미지 경로]\r\n *  - firstOnChange : 첫번째 이미지 바뀐 경우\r\n *  - secOnChange : 두번째 이미지 바뀐 경우\r\n **/\r\n\r\nimport ImgComponent from \"./ImgComponent\";\r\nimport { useState } from \"react\";\r\n\r\nconst ImgRegisterComponent = (props) => {\r\n  return (\r\n    <div className={props.class}>\r\n      <h4>{props.title}</h4>\r\n      <p>{props.cont}</p>\r\n      <div className=\"imgFlex\">\r\n        {/* <ImgWrap\r\n          id={\"input-file1\"}\r\n          src={props.src[0]}\r\n          onChange={props.firstOnChange}\r\n        />\r\n        <ImgWrap\r\n          id={\"input-file2\"}\r\n          src={props.src[1]}\r\n          onChange={props.secOnChange}\r\n        /> */}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst ImgWrap = (props) => {\r\n  const [url, setUrl] = useState(\"\");\r\n\r\n  const encodeFileToBase64 = (file) => {\r\n    const reader = new FileReader();\r\n    reader.readAsDataURL(file);\r\n    return new Promise((resolve) => {\r\n      reader.onload = () => {\r\n        setUrl(reader.result);\r\n        props.onChange(file);\r\n        resolve();\r\n      };\r\n    });\r\n  };\r\n\r\n  // const name = document.querySelector(\".imgWrap\").className;\r\n\r\n  // document.querySelector(\".imgSelected\").mouseover(function () {\r\n  //   if (name.hasClass(\"imgSelected\")) {\r\n  //     name.addClass(\"imgWrap\");\r\n  //   }\r\n  // });\r\n\r\n  return (\r\n    <div className={\"imgWrap\"}>\r\n      {url === \"\" ? (\r\n        <ImgComponent class={\"img img1\"} src={props.src} />\r\n      ) : (\r\n        <img className={\"img img1\"} src={url} alt={\"img\"} />\r\n      )}\r\n      <label className=\"plus\" htmlFor={props.id}>\r\n        +\r\n      </label>\r\n      <input\r\n        type=\"file\"\r\n        id={props.id}\r\n        style={{ display: \"none\" }}\r\n        accept={\"image/jpeg, image/jpg, image/png\"}\r\n        onChange={(e) => encodeFileToBase64(e.target.files[0])}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ImgRegisterComponent;\r\n","/**\r\n * Name : TypeComponent\r\n * Desc : 쓰레기 유형 박스 컴포넌트\r\n * Property\r\n *  - class : 박스 클래스\r\n *  - onClick : 클릭 이벤트\r\n *  - number : 박스 숫자\r\n *  - src : 박스 이미지 경로\r\n *  - item : 박스 텍스트\r\n **/\r\n\r\n let txtstyle = {\r\n    textAlign: 'center'\r\n}\r\n\r\nconst TypeComponent = (props) => {\r\n  return (\r\n    <div className={props.class} onClick={props.onClick}>\r\n      <h5 style={txtstyle}>{props.txt}</h5>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TypeComponent;\r\n","/**\r\n * Name : CircleComponent\r\n * Desc : 캠페인 참여 촬영 과정 원+화살표 컴포넌트\r\n * Property\r\n *  - txt : 원 안에 들어가는 내용\r\n **/\r\n\r\nconst CircleComponent = (props) => {\r\n  return (\r\n    <>\r\n      <div className=\"circle\">{props.txt}</div>\r\n      <div className=\"arrow\">⟩</div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default CircleComponent;\r\n","import { useEffect, useState } from \"react\";\r\nimport ImgRegisterComponent from \"../components/ImgRegisterComponent\";\r\nimport TypeComponent from \"../components/TypeComponent\";\r\nimport ButtonComponent from \"../components/ButtonComponent\";\r\nimport CircleComponent from \"../components/CircleComponent\";\r\n\r\nconst ParticipationCopy = () => {\r\n  const [type, setType] = useState([]);\r\n\r\n  useEffect(() => {\r\n    console.log(type);\r\n  }, [type]);\r\n\r\n  const putType = (text) => {\r\n    const newArray = type.filter(function (data) {\r\n      return data !== text;\r\n    });\r\n\r\n    !type.includes(text)\r\n      ? setType([...type, text])\r\n      : setType(type.filter((item) => item !== text));\r\n  };\r\n\r\n  return (\r\n    <div className={\"wrap participation\"}>\r\n      <main>\r\n        <h3>다중 선택 기능</h3>\r\n        <hr />\r\n\r\n        {/* <ImgRegisterComponent\r\n          class={\"imgComponent imgComponent1\"}\r\n          title={\"# 사진 등록\"}\r\n          cont={[\r\n            <u> 선택 전,</u>,\r\n            <u> 선택 후 </u>,\r\n            \" 2장의 사진을 올려주세요.\",\r\n          ]}\r\n          src1={\"blank_img.svg\"}\r\n          src2={\"blank_img.svg\"}\r\n        /> */}\r\n        <ImgRegisterComponent\r\n          class={\"imgComponent imgComponent2\"}\r\n          title={\"# 사진 촬영 가이드\"}\r\n          cont={[\r\n            \"하나의 프로젝트를 만들기 위해서는\",\r\n            <u> 과정,</u>,\r\n            <u> 노력</u>,\r\n            \" 이 필요합니다. 유형 박스를 \",\r\n            <u> 클릭</u>,\r\n            \"하면 선택되고 다중 선택 및 해제도 가능합니다.\",\r\n          ]}\r\n          src1={\"before.png\"}\r\n          src2={\"after.png\"}\r\n        />\r\n\r\n        {/* ============================ */}\r\n\r\n        <div className=\"process\">\r\n          <CircleComponent txt={\"기획\"} />\r\n          <CircleComponent txt={\"디자인\"} />\r\n          <CircleComponent txt={\"구현\"} />\r\n          <CircleComponent txt={\"완성\"} />\r\n        </div>\r\n\r\n        {/* ============================ */}\r\n\r\n        <div className=\"type\">\r\n          <h4># SNS 유형</h4>\r\n          <p>\r\n            어떤 아이콘들이 있나요? <br /> 원하는 아이콘을 선택하세요.\r\n          </p>\r\n          <div className=\"typeFlex\">\r\n            <TypeComponent\r\n              onClick={() => putType(\"Kakaotalk\")} // 버튼을 클릭했을 때 putType 함수가 발생된다.\r\n              class={type.includes(\"Kakaotalk\") && \"checked\"} //temp 배열에 Kakaotalk이 있으면 컴포넌트의 클래스 이름이 checked\r\n              txt={\"Kakaotalk\"}\r\n            />\r\n            <TypeComponent\r\n              onClick={() => putType(\"papper\")}\r\n              class={type.includes(\"papper\") && \"checked\"}\r\n              txt={\"Facebook\"}\r\n            />\r\n            <TypeComponent\r\n              onClick={() => putType(\"metal\")}\r\n              class={type.includes(\"metal\") && \"checked\"}\r\n              txt={\"Twitter\"}\r\n            />\r\n            <TypeComponent\r\n              onClick={() => putType(\"leaflet\")}\r\n              class={type.includes(\"leaflet\") && \"checked\"}\r\n              txt={\"Instagram\"}\r\n            />\r\n            <TypeComponent\r\n              onClick={() => putType(\"glass\")}\r\n              class={type.includes(\"glass\") && \"checked\"}\r\n              txt={\"Blog\"}\r\n            />\r\n            <TypeComponent\r\n              onClick={() => putType(\"plastic\")}\r\n              class={type.includes(\"plastic\") && \"checked\"}\r\n              txt={\"Naver Band\"}\r\n            />\r\n            <TypeComponent\r\n              onClick={() => putType(\"styrofoam\")}\r\n              class={type.includes(\"styrofoam\") && \"checked\"}\r\n              txt={\"Pinterest\"}\r\n            />\r\n            <TypeComponent\r\n              onClick={() => putType(\"wood\")}\r\n              class={type.includes(\"wood\") && \"checked\"}\r\n              txt={\"LinkedIn\"}\r\n            />\r\n            <TypeComponent\r\n              onClick={() => putType(\"clothing\")}\r\n              class={type.includes(\"clothing\") && \"checked\"}\r\n              txt={\"Weibo\"}\r\n            />\r\n            <TypeComponent\r\n              onClick={() => putType(\"foodWaste\")}\r\n              class={type.includes(\"foodWaste\") && \"checked\"}\r\n              txt={\"Youtube\"}\r\n            />\r\n            <TypeComponent\r\n              onClick={() => putType(\"vinyl\")}\r\n              class={type.includes(\"vinyl\") && \"checked\"}\r\n              txt={\"Tiktok\"}\r\n            />\r\n            <TypeComponent\r\n              onClick={() => putType(\"homeAppliances\")}\r\n              class={type.includes(\"homeAppliances\") && \"checked\"}\r\n              txt={\"Cyworld\"}\r\n            />\r\n            <TypeComponent\r\n              onClick={() => putType(\"rubber\")}\r\n              class={type.includes(\"rubber\") && \"checked\"}\r\n              txt={\"Clubhouse\"}\r\n            />\r\n            <TypeComponent\r\n              onClick={() => putType(\"etc\")}\r\n              class={type.includes(\"etc\") && \"checked\"}\r\n              txt={\"Discord\"}\r\n            />\r\n          </div>\r\n          <ButtonComponent txt={\"등록 하기\"} class={\"save\"} />\r\n        </div>\r\n      </main>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ParticipationCopy;\r\n\r\n// 박스 다중 선택일 때\r\n\r\n// const putType = (text) => {\r\n//   !type.includes(text) ? setType([...type, text]) : (지우는 함수를 작성한다.);\r\n// };\r\n\r\n// const putType = (text) => {\r\n//   !type.includes(text) && setType([...type, text]); type 배열이 text를 포함하지 않으면 setType함수 실행 (기존의 type 배열에 text를 추가한 새로운 배열 생성)\r\n//   type.includes(text) && setType([...type, text]);\r\n// };\r\n\r\n// 함수 안에 const temp = type 을 선언하고 밖에 안 쓰는 이유 : 밖에 선언하면 시작 전에 한 번 실행하고 끝이다.\r\n\r\n// const putType = (text) => {\r\n//   if (!type.includes(text)) {\r\n//     setType([...type, text]);\r\n//   }\r\n// setType([\"d\", \"d\"]) // type이 배열일 때 이런 식으로 직접 덮어 쓰는 건 되지만 변수를 하나 더 만들어서 그 변수를 덮어 쓰는 거 예를 들면 setType(A) 는 안 된다.\r\n// };\r\n\r\n// A && 결과(이 결과에는 한 개 밖에 작성할 수 없다. 여러 개를 쓰기 위해서는 위에 처럼 if 문으로 써야한다.\r\n"],"names":["props","className","class","onClick","txt","_toConsumableArray","arr","Array","isArray","arrayLikeToArray","iter","Symbol","iterator","from","unsupportedIterableToArray","TypeError","title","cont","txtstyle","textAlign","style","useState","type","setType","useEffect","console","log","putType","text","filter","data","includes","item","src1","src2","ButtonComponent"],"sourceRoot":""}